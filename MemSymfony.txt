
app : fichiers qui concernent l'entièreté du site (configuration)
bin : executables
src : code source
tests : test de l'appli
var : logs, cache, on y touche pas.
vendor : libs externes
web : images, css, js, controleur frontal app.php (le seul accessible aux visiteurs)

En moyenne, on trifouille chez /app et /src


controleur frontal : point d'entrée du programme. Par ici passent toutes les pages. Un 
peu l'idée du index.php avec tous les ?var=id qui passent après. Sous symfony c'est app.php
ou app_dev.php

deux environnements :
developpement : app_dev.php [http://localhost:8000/app_dev.php/...] - http://localhost:8000/app_dev.php/Signin/signin
prod : app.php [http://localhost:8000/app.php/...]

si erreurs en mode prod, on peut aller checker chez var/logs/prod.log 

Architecture MVC (Modèle / Vue / Contrôleur)
Modèle : gère données et contenu. C'est lui qui réalise les appels à la bdd.
permet au controleur de gérer les données sans savoir comment elles sont stockées
Contrôleur : analyse et traite la requête de l'utilisateur. Chef d'orchestre
vue : afficher les pages. Côté designer. La tronche qu'aura une page

bundle : fonctionnalité.
Ex -> bundle blog qui contient contrôleurs, vues, css, js tout ça d'un blog.
Ex -> bundle user qui gère groupes, mdp, page d'admin des users, formulaire d'inscription, ...

php bin/console generate:bundle
Nom/NombBundle
NomNombBundle

ajouter une structure html 
{# src/Nom/NombBundle/Resources/views/Default/index.html.twig #} <html><body> </body></html>
pour le retour de la barre

il faut ajouter une route :
nom_nomb:
	resource : "@RCCfAdminBundle/Resources/config/routing.yml" [chemin du routing du bundle]
	prefix : "/prefixevoulu"
	
En résumé, création de bundle :
	code source dans src/application/bundleBundle/ avec fichier applicationbundleBundlephp 
	à la racine
	
	enregistrer le bundle dans le noyau app/AppKernel.php avec new application/bundle...
	
	enregistrer les routes en modifiant app/config/routing.yml
	
Création d'une page :
1 - déf URL en changeant Resources/config/routing.yml /!\ 4 ESPACES - PAS DE TAB /!\
nom_route:
    path:    /url
	defaults: {_controller: RCCFAdminBundle:Advert:index}
	
defaults : paramètres de la route
  _controller : action que l'on veut éxecuter et controleur (advert) que l'on va appeler.
    RCCFAdminBundle -> nom du bundle
	Advert : nom du contrôleur à ouvrir
	index : nom de la méthode à éxecuter dans le contrôleur.
  
on ajoute pas les nouvelles routes dans app/config/routing.yml puisque elles sont internes
au bundle -> encapsulation.

Il faut créer les contrôleurs , AdvertController.php dans l'exemple.
pour chaque action définie dans defaults (cf routes) il faut une méthode actionAction(), 
par ex indexAction(). 
	
Dans le contrôleur on met le minium de html tout ça, on se repose sur les templates Twig.

vider le cache du mode prod 
	1 - php bin/console cache:clear --env=prod
	2 - OU manuellement vider var/cache/{dev, prod}

	
Explication sur le routing en Symfony
on touche au fichier nomBundle/Resources/config/routing.yml

path : entrée - url à capturer
defaults : paramètres de la route, quel contrôleur appeler.

possibilité de mettre des jockers /url/{id} catchera les url du type /url/5
en plaçant 5 pour la variable id.

# src/OC/PlatformBundle/Resources/config/routing.yml

oc_platform_home:
    path:      /platform
    defaults: { _controller: OCPlatformBundle:Advert:index }
    
oc_platform_view:
    path:      /platform/advert/{id}
    defaults: { _controller: OCPlatformBundle:Advert:view }
    
oc_platform_add:
    path:      /platform/add
    defaults: { _controller: OCPlatformBundle:Advert:add }

oc_platform_... -> nom de la route
path : /... -> URL sur laquelle la route s'applique
defaults : paramètre de sortie de la route.

dans les lignes _controller : 
OCPlatformBundle -> nom du Bundle
Advert -> nom du controleur (cf AdvertController.php)
view -> nom de l'action à exécuter (cf viewAction())

si {id} est mentionné dans le path, il est alors obligatoire par défaut
pour que l'URL matche

# src/OC/PlatformBundle/Resources/config/routing.yml

oc_platform_view_slug:
    path:      /platform/{year}/{slug}.{format}
    defaults:
        _controller: OCPlatformBundle:Advert:viewSlug
		format:      html # donne une valeur par défaut à format 
    requirements:
        year:   \d{4}  # 4 chiffres
        format: html|xml  # l'un ou exclusif l'autre
		
paramètres système : (appellent directement le Kernel de Symfony)
_format -> ajoute un paramètre Content-type à la réponse
_locale -> langue, pas oublier les requirements (si le gars demande russe alors
           qu'il y a que anglais et français à proposer ...)
_controller -> le contrôleur à appeler

possibilité d'ajouter des préfixes, avec le param prefix dans app/config/routung.yml


pour récupérer une requête dans un contrôleur (pour gérer les arguments du type ?tag=24 dans 
les url)

use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

class LeControleur extends Controller {
	public function viewAction($p1, Request $p2){ //p2 est la requete site/page?tag=5
		$tag = $request->query->get('tag');
		// ...
	
	}
}

tableau des variables :
type de param              méthode symfony         méthode php           exemple

Variables d'URL            $request->query         $_GET                 $request->query->get('tag')
Variables de formulaire    $request->request       $_POST                $request->request->get('tag')
Variables de cookie        $request->cookies       $_COOKIE              $request->cookies->get('tag')
Variables de serveur       $request->server        $_SERVER              $request->server->get('REQUEST_URI')
Variables d'entête         $request->headers       $_SERVER['HTTP_*']    $request->headers->get('USER_AGENT')
Paramètres de route        $request->attributes    n/a                   $request->attributes->get('id')

Rmq : si le paramètre n'existe pas, on retourne une chaine vide et non une erreur (donc pas
besoin de tester l'existence).

si un formulaire est envoyé -> méthode POST |
                                            | } isMethod()
si sur un clic              -> méthode GET  |

requête AJAX ? isXmlHttpRequest() -> pratique pour renvoyer du JSON
http://api.symfony.com/3.0/Symfony/Component/HttpFoundation/Request.html

possibilité de construire une réponse complète avec les méthodes de l'objet Response
setContent(), setStatusCode().

la méthode render() permet d'éviter de se payer l'enchaînement des méthodes.

Une redirection est une requête HTTP avec unp paramètre Location. On peut utiliser l'objet
Redirect Response 

class AdvertController extends Controller {
  public function viewAction($id) {
    $url = $this->get('router')->generate('oc_platform_home'); // definit l'url de redirection
    return new RedirectResponse($url); // redirection
	// ou return $this->redirect($url);
	
	
	// ou le tout en une seule ligne
	// return $this->redirectToRoute('oc_platform_home');
  }
}

petit point config : en mettant intercept_redirects = true dans app/config/config_dev.yml
on peut avoir un visuel symfony sur les pages excecutées tout ça, au lieu d'être redirigé
salement.

Le contenu d'une réponse dépend du paramètre Content-type dans le header de celle-ci. 
on peut par exemple renvoyer du JSON avec un objet JsonResponse par exemple.

On peut gérer les sessions avec [objet request] $request->getSession
message flash -> variable de session qui ne vit que sur une seule page.

$this->addFlash(
            'notice',
            'success!'
        );

		



























